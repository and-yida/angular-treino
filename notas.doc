INTRODUÇÃO

Angular: framework para construir aplicações em HTML, CSS, JavaScript/TypeScript.
Frameworks foram criadas para facilitar o desenvolvimento de aplicações web, já que utilizar JavaScript direto vai se tornando complexo e é difícil de testar.
Nessa estrutura, teremos:
    Front-end: abrange o que usuário vê e interage (user interface) - utilizaremos HMTL, CSS, TypeScript e Angular;
    Back-end: abrange os servidores que armazenam os dados e realizam o processamento - utilizaremos bases de dados, serviços HTTP ou APIs.
Endpoints são acessados por meio de protocolo HTTP - fazemos requests para acessar ou salvar dados.

Environment

A programação ocorre dentro do Angular workspace. Necessário criar um workspace através do comando: ng new nomedoprojeto
Setar pasta: cd endereço
Carregar a aplicação em um servidor web: ng serve

Pasta node_modules: bibliotecas que são compiladas quando a app é implantada (deploy/subir para um servidor).
Pasta src: onde encontra-se o código de fato (origem).
    Pasta app: module e component.
    Pastas assets: armazenar elementos estáticos.
    Environments: armazena configurações dos environments.
    Index.html: contém a aplicação, mas as referências são inseridas de forma dinâmica nessa página.
    Main.ts: ponto de partida em que o Angular carrega o module.
    Styles.css: estilos globais da aplicação - cada página ou componente pode ser seu style.
    Package.json: bibliotecas necessárias.
    Tsconfig.json: configurações do compilador que transforma TypeScript para JavaScript de forma que os navegadores consigam ler.

___________________________________


TYPESCRIPT

TypeScript suporta tudo do JavaScript, e contém aspectos a mais.
Transpile: compilador traduz TypeScript para JavaScript, que é entendido pelos navegadores.

let = declarar variável
    count = número
    string
    number
const = constante
console.log('') = exibe uma mensagem
function = função
enum variavel = ordenar numericamente

Asserções
Asserção consiste em declarar explicitamente qual é o tipo da variável. Maneiras:
    Com <>: (<a>variavel);
    Com as: (variavel as a)
Não altera o dado da variável na memória.

Arrow functions
Para escrever uma função, não é necessário usar a keyword function, basta colocar o parâmetro e a flecha (arrow function)
Ex.:
    let log = (message) => {
        console.log(message);
    }

    // 1) declara variável log que recebe a função message;
    // 2) o bloco de código entre {} indica o que fazer que a variável.
    // 3) console.log exibe a função message.

Custom types
Interface
Ao invés de escrever parâmetro por parâmetro dentro de uma função, é preferível reuní-los dentro de um objeto (definido anteriormente), e indicar somente o objeto na função.
Em casos simples, usamos inline annotation para indicar o custom type ou o custom object.
    Ex.: (point: {x: number; y: number})
Usando interface, podemos declarar objetos (com seus parâmetros e tipos) fora da função, de forma a servir para mais de uma função.
    Ex.:
        interface Point {
            x: number,
            y: number
        }
        let drawPoint = (point: Point) => {
            ...
        }

Cohesion
Em programação orientada a objetos, há o conceito de coesão: coisas relacionadas devem fazer parte de uma mesma unidade. No exemplo anterior, a função let está a parte, embora esteja relacionada a interface.
A unidade deve ser a chamada classe.
Como interface serve só para declaração, não para implementação, usaremos classes.

Classes
Class: agrupa propriedades e funções que são altamente relacionadas.
Ex.:
    class Point {
        x: number;
        y: number;

        draw() {
            ...
        }

        getDistance() {
            ...
        }
    }

    // 1) x e y são atributos, utilizados para armazenar dados.
    // 2) draw é uma função, onde realmente ocorre implementação - faz parte dos métodos.

This
O "this" funciona de forma parecida com os pronomes na língua portuguesa. Quando falamos "João está correndo porque ele quer pegar o ônibus", usamos "ele" para referir-mo-nos ao João. Nessa analogia, this funciona tanto para se referir ao objeto (assim como "ele" se refere a João) quanto para armazenar o valor do objeto.
This é interessante para garantir precisão: vai se referir ao objeto citado anteriormente, ao qual a função está associada.
Ex.:
    var person = {
        firstName: "Penelope",
        lastName: "Barrymore",
        fullName: function () {
            console.log(this.firstName + " " + this.lastName);
        }
    }
Uma função contendo um objeto vai ter as propriedades do objeto invocado. Precisamos do this para acessar os métodos e propriedades do objeto.

Objects
Para que o objeto tenha um valor, temos que declará-lo usando let de forma que uma espaço de memória seja reservado a ele(definir a classe não atribui valor automaticamente).
Ex.:
    class Point {
        x: number;
        y: number;

        draw() {
            console.log('X: ' + this.x + ', Y: ' + this.y);
        }
    }

    let point = new Point();
    point.draw();

    // 1) Escrito dessa maneira, let declara o objeto point que receberá um valor, e o compilador infere que o objeto point pertence à classe Point.
    // 2) Por padrão, x e y estarão como undefinied. Vamos atribuir valores a eles.

    let point = new Point();
    point.x=1;
    point.y=2;
    point.draw();

Constructors
Constructor é um método de classe, contendo parâmetros, atributos (variáveis) declaradas diretamente no método, e inicializamos as variáveis usando this.x = x
É necessário fornecer os valores de x e y, no entanto, se não soubermos os valores iniciais dos atributos ou não quisermos atribuir, fazemos deles opcionais adicionando "?".
Ex.:
    class Point {
        x: number;
        y: number;

        constructor(x?: number; y?: number){
            this.x=x;
            this.y=y;

        }
        draw() {
            console.log('X: ' + this.x + ', Y: ' + this.y);
        }
    }

    let point = new Point();
    point.draw();

Access modifiers
Para controlar o acesso a atributos de uma classe, temos três modificadores: public, private e protected.
Declarando private x: number, isso garante que o valor de x não será modificado em outra parte do código.

Se prefixarmos um constructor com um acess modifier (private ou public), o compilador vai gerar atributos com aquele nome e vai inicializá-los.
Ex.:
    //inicialmente tínhamos isso
    class Point {
        x: number;
        y: number;

        constructor(x?: number; y?: number){
            this.x=x;
            this.y=y;

        }

    //podemos resumir em
    class Point {
        constructor(private x: number, private y: number) {
        }
    }

Acessar as propriedades dos atributos
Não conseguimos exibir o valor dos atributos diretamente fora da classe. Precisamos criar a função getX.
Ex.:
    getX() {
        return this.x;
    }

    let x = point.getX();
    point.draw();

Propriedade
Se quisermos alterar manualmente o valor do atributo, podemos usar propriedade ao invés de método. Ao invés de getX, declaramos get X, sendo X uma propriedade. Para indicar X, usamos point.X
Ex.:
    get X() {
        return this.x;
    }

    set X(value) {
        if (value<0) {
            throw new Error('value cannot be less than 0.');

            this.x = value;
        }
    }

    let x = point.X();
    point.X=10;
    point.draw();

    //nesse exemplo usamos uma validação para X - o valor tem que ser maior que 0

Module
Utilizar arquivos como modules implica em podermos acessar esses arquivos através de import no código.
Ex.: criamos o arquivo point.ts que está criando a classe Point.
Ex.:
    import { Point } from './point'

    //a origem está indicando que o arquivo está no mesmo diretório

    //no arquivo point adicionamos export
    export class Point {
        //...
    }
Em Angular, os modules são um pouco diferentes. Eles não são indicados por um diretório, mas ficam dentro da pasta node_modules. Para importar usamos o nome da biblioteca. 

___________________________________


ANGULAR

Component
No núcleo de todo app em Angular existem os componentes.
Componente engloba Dados, HTML template e Lógica.
Podemos ver um site como tendo uma view ou um componente, mas também podemos fragmentar isso em vários componentes. Ex.: navbar, sidebar, app ou route component.
Angular é uma arquitetura baseada em componentes que nos permite trabalhar com partes menores e mais sustentáveis, que podem ser reutilizáveis. 
Module é o depósito de um grupo de componentes relacionados.

Criando componente
Na pasta src/app criamos um arquivo component.ts . Criamos uma classe Component e incluímos o export. Para transformar isso em um componente, devemos adicionar metadata através de um decorator. Os decorators oferecem a possibilidade de adicionar metadados e comportamentos a declaração de classes, métodos e propriedades.
Importamos o decorator que cria componente através da biblioteca: import { Component } from '@angular/core'
Para atrelar esse componente à classe: @Component({})
Dentro de {} passamos os parâmetros para dizer ao Angular como esse componente se comporta. Usamos selector e indicamos como 'element'. Depois, adicionamos template (podemos ter um arquivo só para template, mas para fins didáticos colocamos aqui somente um título).
Ex.:
    import { Component } from '@angular/core';

    @Component( {
    selector: 'courses',
    template: '<h2>Courses</h2>'
    } )

    export class CoursesComponent {
}

Depois registramos esse componente em um module. Inicialmente, temos somente o app module (src/app/app.module.ts). O decorator que transforma a classe em module é @NgModule.
Em declarations, por padrão existe um componente, o AppComponent. Aqui adicionamos o componente que criamos, que será importado.
Ex.:
    @NgModule({
        declarations: [
        AppComponent,
        CoursesComponent
    ],

Voltando ao componente que criamos, em todo lugar no código em que houver o elemento de mesmo nome (do componente), o Angular irá renderizar o template que o acompanha.
Em app.component.html temos o template externo para o app component, renderizando a homepage. Se apagarmos e colocarmos o elemento que criamos <...><.../>, o template atrelado a ele será renderizado. Esse conteúdo que acompanha o elemento chama-se ng-content
Ex.:
    <h1>Angular</h1>
    <courses></courses>
    
    // sempre que o elemento <courses> aparecer, o template do CoursesComponent será renderizado.

Nesse html aparece também o elemento app-root, podemos encontrar seu conteúdo em index.html (template básico do app), e ele está declarado pelo selector: component, para o componente AppComponent (padrão) em app.component.ts
    app-root é o nome do elemento, quando chamado renderiza o template; está atrelado ao componente AppComponent.

Criando componentes usando Angular CLI
Podemos criar um componente rapidamente usando, no terminal, o comando: ng g c nomedocomponente
    (generate component)
É criada uma pasta com os arquivos, e o arquivo app.module é atualizado com o novo componente.

Templates
Usamos {{}} para renderizar algo dinamicamente. Isso quer dizer que a expressão usada aí é avaliada em tempo de execução, e o valor dessa expressão vai ser colocada no dom. Se o valor por modificado no futuro, o Angular vai atualizar automaticamente o dom (data binding).
Ex.:
    @Component( {
    selector: 'courses',
    template: '<h2>{{ title }}</h2>'
    } )
    export class CoursesComponent {
    title = "List of courses";
    }
Usar ` para mais de uma linha.

Text interpolation
A interpolação de uma string permite incorporar uma string dinâmica, isto é, que muda dinamicamente o que é exibido, de acordo com o valor do elemento passado.
É feito através de {{}}

Directive
Usamos directive para manipular o dom (adicionar um elemento, remover, modificar a classe, etc.)
ngFor="" : loop de variáveis
* é usado como prefixo de um directive.
Ex.:
    @Component( {
    selector: 'courses',
    template: `
        <h2>{{ title }}</h2>
        <ul>
            <li *ngFor="let course of courses">
                {{ course }} </li>
        </ul>
    `

        // nomeamos uma variável course, e courses é um atributo da classe que estamos iterando continuamente
        //o atributo courses vai ser iterado continuamente, e em cada iteração a variável course vai adquirir o valor de um course por vez
        // {{ course }} é interpolação de string; vai exibir dinamicamente valor da variável aqui
} )

export class CoursesComponent {
    title = "List of courses";
    courses = ["course1", "course2", "course3"];

}

Services
Geralmente adquirimos os valores das variáveis a partir de um server, chamando um HTTP endpoint. A lógica desse comando é implementada através do uso de services.
Criamos um arquivo separado onde definimos uma classe para service. Dessa forma, poderemos reaproveitar a lógica por trás dessa classe e manter esse tipo de conteúdo separado da parte da interface (componentes).
Ex.:
    export class CoursesService {
    getCourses() {
        return ["course1", "course2", "course3"]
    }
}
Colocamos export no arquivo do service, e import no component.
Utilizamos constructor pois é aí que inicializamos um objeto. Passamos como parâmetro uma variável para receber a função definida no service. O Angular cria uma instância desse service observando se o constructor tem alguma dependência. No nosso caso existe - service depende da classe CoursesService.

Ex.:
    export class CoursesComponent {
    title = "List of courses";
    courses;

    constructor (service: CoursesService) {
        this.courses = service.getCourses();
    }

Injeção de dependência
Quando a classe A usa alguma funcionalidade da classe B, diz-se que a classe A tem uma dependência da classe B.
Antes de podermos usar métodos de outras classes, primeiro precisamos criar o objeto daquela classe (ou seja, a classe A precisa criar uma instância da classe B). Se por ventura houver futuras alterações na classe B, não haverá problemas para a classe A pois os objetos são criados em tempo de execução.
Desse modo, transferir a tarefa de criação do objeto a outra entidade e usar diretamente a dependência é chamado de injeção de dependência.
No nosso código, ainda é necessário registrar a dependência no module. Em app.module.ts temos os providers, um array para registrar todas as dependências que componentes desse module estão contando com.
Ex.:
    providers: [
        CoursesService
    ]

Criando services usando Angular CLI
No terminal, podemos criar um service usando: ng g s nomedoservice
No arquivo criado do service, há um decorator chamado injectable, que será utilizado se houver dependências dessa classe no constructor - isto é, indica que a classe é uma classe injetável.




